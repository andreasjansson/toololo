name: Run Tests and Publish to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # For PyPI trusted publishing

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio twine build

    - name: Extract version from setup.py
      id: get_version
      run: |
        VERSION=$(python -c "import re; print(re.search(r'version=[\"\'](.*?)[\"\']', open('setup.py').read()).group(1))")
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Current version: $VERSION"

    - name: Check if version exists on PyPI
      id: version_check
      run: |
        VERSION="${{ env.VERSION }}"
        echo "Checking if version $VERSION exists on PyPI"
        if curl --silent --fail "https://pypi.org/pypi/toololol/$VERSION/json" > /dev/null; then
          echo "VERSION_EXISTS=true" >> $GITHUB_ENV
          echo "Version $VERSION already exists on PyPI"
        else
          echo "VERSION_EXISTS=false" >> $GITHUB_ENV
          echo "Version $VERSION does not exist on PyPI"
        fi

    - name: Set up OpenRouter API key for testing
      if: github.event_name != 'pull_request'
      run: |
        echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> $GITHUB_ENV

    - name: Run integration tests
      run: |
        pytest -vv -s test-integration/

    - name: Build package
      if: env.VERSION_EXISTS == 'false' && github.event_name != 'pull_request'
      run: |
        python -m build

    - name: Publish to PyPI
      if: env.VERSION_EXISTS == 'false' && github.event_name != 'pull_request'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
